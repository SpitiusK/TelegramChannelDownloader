// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TelegramChannelDownloader.DataBase;

#nullable disable

namespace TelegramChannelDownloader.DataBase.Migrations
{
    [DbContext(typeof(TelegramDbContext))]
    partial class TelegramDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramChannelDownloader.Core.Data.Entities.DownloadSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ChannelUsername")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExportFormat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExportPath")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ProcessedMessages")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("TotalMessages")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("IX_download_sessions_channel_id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_download_sessions_expires_at")
                        .HasFilter("expires_at IS NOT NULL");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_download_sessions_started_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_download_sessions_status");

                    b.HasIndex("ChannelId", "Status")
                        .HasDatabaseName("IX_download_sessions_channel_status");

                    b.ToTable("download_sessions", (string)null);
                });

            modelBuilder.Entity("TelegramChannelDownloader.Core.Data.Entities.TelegramMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DownloadSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ForwardedFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForwardedFromMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("Forwards")
                        .HasColumnType("integer");

                    b.Property<string>("FromDisplayName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("FromUsername")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("HasMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsForwarded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MediaFileName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long?>("MediaFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaMimeType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MediaType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MessageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("RawData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Reactions")
                        .HasColumnType("jsonb");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .HasDatabaseName("IX_telegram_messages_content_gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Content"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Content"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_telegram_messages_date");

                    b.HasIndex("DownloadSessionId")
                        .HasDatabaseName("IX_telegram_messages_session_id");

                    b.HasIndex("FromId")
                        .HasDatabaseName("IX_telegram_messages_from_id");

                    b.HasIndex("ReplyToMessageId")
                        .HasDatabaseName("IX_telegram_messages_reply_to")
                        .HasFilter("reply_to_message_id IS NOT NULL");

                    b.HasIndex("DownloadSessionId", "Date")
                        .HasDatabaseName("IX_telegram_messages_session_date");

                    b.HasIndex("DownloadSessionId", "HasMedia")
                        .HasDatabaseName("IX_telegram_messages_session_media");

                    b.HasIndex("DownloadSessionId", "MessageType")
                        .HasDatabaseName("IX_telegram_messages_session_type");

                    b.ToTable("telegram_messages", (string)null);
                });

            modelBuilder.Entity("TelegramChannelDownloader.Core.Data.Entities.TelegramMessage", b =>
                {
                    b.HasOne("TelegramChannelDownloader.Core.Data.Entities.DownloadSession", "DownloadSession")
                        .WithMany("Messages")
                        .HasForeignKey("DownloadSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_telegram_messages_download_sessions");

                    b.Navigation("DownloadSession");
                });

            modelBuilder.Entity("TelegramChannelDownloader.Core.Data.Entities.DownloadSession", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
